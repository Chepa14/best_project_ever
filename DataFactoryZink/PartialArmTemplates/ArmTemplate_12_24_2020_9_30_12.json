{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DataFactoryZink"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/MainPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataMigration",
								"type": "DataFlowReference",
								"parameters": {
									"date_format": "\"yyyy-MM-dd\""
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyDataPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataMigration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataMigration')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CopyDbPath",
								"type": "DatasetReference"
							},
							"name": "Arrivals"
						},
						{
							"dataset": {
								"referenceName": "CopyDbPath",
								"type": "DatasetReference"
							},
							"name": "Sales"
						},
						{
							"dataset": {
								"referenceName": "CopyDbPath",
								"type": "DatasetReference"
							},
							"name": "Products"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "Join3"
						},
						{
							"name": "Aggregate4"
						},
						{
							"name": "Join4"
						},
						{
							"name": "Select3"
						}
					],
					"script": "parameters{\n\tdate_format as string (\"yyyy-MM-dd\")\n}\nsource(output(\n\t\tid as short,\n\t\tdatetime as string,\n\t\tproduct_id as short,\n\t\tshop_id as short,\n\t\tqnty as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[(\"data/\" + toString(year(currentDate())) + \"/\" + toString(month(currentDate())) + \"/\" + toString(dayOfMonth(minus(currentDate(), 1)) ) + \"/dbo.arrivals.csv\")]) ~> Arrivals\nsource(output(\n\t\tid as short,\n\t\tdatetime as string,\n\t\tproduct_id as short,\n\t\tshop_id as short,\n\t\tqnty as short,\n\t\tprice as double,\n\t\tcost as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[(\"data/\" + toString(year(currentDate())) + \"/\" + toString(month(currentDate())) + \"/\" + toString(dayOfMonth(minus(currentDate(), 1)) ) + \"/dbo.sales.csv\")]) ~> Sales\nsource(output(\n\t\tid as short,\n\t\tname as string,\n\t\tcategory_id as boolean,\n\t\tprice_net as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[(\"data/\" + toString(year(currentDate())) + \"/\" + toString(month(currentDate())) + \"/\" + toString(dayOfMonth(minus(currentDate(), 1)) ) + \"/dbo.products.csv\")]) ~> Products\nArrivals filter(toDate(datetime, $date_format) < currentDate($date_format)) ~> Filter1\nSales filter(toDate(datetime, $date_format) < currentDate($date_format)) ~> Filter2\nFilter1 select(mapColumn(\n\t\tproduct_id_arrivals = product_id,\n\t\tshop_id_arrivals = shop_id,\n\t\tqnty_arrivals = qnty\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nJoin2 aggregate(groupBy(shop_id_arrivals,\n\t\tproduct_id_arrivals),\n\tqnty = sum(qnty_arrivals),\n\t\tprice = sum(price_net * qnty_arrivals)) ~> Aggregate2\nSelect2, Products join(product_id_arrivals == id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join2\nFilter2 aggregate(groupBy(shop_id,\n\t\tproduct_id),\n\tsold = sum(cost),\n\t\tsold_qnty = sum(qnty)) ~> Aggregate3\nAggregate2, Aggregate3 join(shop_id_arrivals == shop_id\n\t&& product_id_arrivals == product_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join3\nJoin3 aggregate(groupBy(datetime = currentDate(),\n\t\tshop_id,\n\t\tproduct_id),\n\tmerge = max(sold-price),\n\t\tremains = max(qnty-sold_qnty)) ~> Aggregate4\nAggregate4, Products join(product_id == id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join4\nJoin4 select(mapColumn(\n\t\tdatetime,\n\t\tshop_id,\n\t\tproduct_name = name,\n\t\tmerge,\n\t\tremains\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 sink(input(\n\t\tdatetime as timestamp,\n\t\tshop_id as integer,\n\t\tproduct_name as string,\n\t\tmerge as decimal(18,0),\n\t\tremains as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tpartitionBy('hash', 1),\n\tdateFormat:'yyyy/MM/dd',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		}
	]
}